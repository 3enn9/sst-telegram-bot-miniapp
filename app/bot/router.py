from io import BytesIO
import aiofiles
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, WebAppInfo, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.engine import connection
from app.database.models import User
from app.database.orm_query import add_user, get_exports

router = Router(name=__name__)


@router.message(CommandStart())
@connection()
async def cmd_start(message: Message, session: AsyncSession, **kwargs):
    welcome_text = (
        "üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ bobcat64!\n\n"
        "üìù –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
        "üìà –°–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    )

    try:
        existing_user = await session.execute(select(User).filter(User.telegram_id == message.from_user.id))
        existing_user = existing_user.scalar_one_or_none()

        if existing_user:
            print('—Å—É—â–µ—Ç—Å–≤—É–µ—Ç')
        else:
            await add_user(session=session, telegram_id=message.from_user.id,
                           username=message.from_user.username,
                           first_name=message.from_user.first_name,
                           last_name=message.from_user.last_name, )

        def main_keyboard() -> InlineKeyboardMarkup:
            kb = InlineKeyboardBuilder()
            kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", web_app=WebAppInfo(url=f"{settings.BASE_SITE}/{message.from_user.id}?username={message.from_user.username}"))
            kb.button(text="üö® –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–æ–º–∫—É", web_app=WebAppInfo(url=f"{settings.BASE_SITE}/breakdown/{message.from_user.id}?username={message.from_user.username}"))
            kb.button(text="üí∞ –ö–∞—Å—Å–∞(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", web_app=WebAppInfo(url=f"{settings.BASE_SITE}/transactions/{message.from_user.id}?username={message.from_user.username}"))
            kb.button(text="üìà –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_my_record")
            kb.adjust(1)
            return kb.as_markup()

        await message.answer(welcome_text, reply_markup=main_keyboard())

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == 'download_excel')
@connection()
async def send_excel(callback: CallbackQuery, session):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = await get_exports(session=session)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file_path = "temp_exports_data.xlsx"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ Excel –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        df.to_excel(buffer, index=False, engine='openpyxl')
        buffer.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é aiofiles
        async with aiofiles.open(temp_file_path, 'wb') as f:
            await f.write(buffer.getvalue())

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        document = FSInputFile(temp_file_path, filename="exports_data.xlsx")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
        await callback.message.answer_document(document)
        await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await aiofiles.os.remove(temp_file_path)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")